"""
Data models for presentation outlines in the Tree of Thought slide generation system.
"""

import re
from typing import List, Optional
from pydantic import BaseModel, Field


class OutlineSection(BaseModel):
    """A section in the presentation outline."""

    # Title of the section
    title: str = Field(..., description="Title of the section")

    # Description of the section content
    description: str = Field(..., description="Description of the section content")

    # Key points to cover in this section
    key_points: List[str] = Field(
        ..., description="Key points to cover in this section"
    )

    # Estimated number of slides needed for this section
    estimated_slides: int = Field(
        ..., description="Estimated number of slides needed for this section"
    )

    # Index of the section in the outline
    section_index: int = Field(..., description="Index of the section in the outline")

    section_type: str = Field(
        ..., description="title, agenda, chapter, conclustion, q&a"
    )

    def clean(self) -> "OutlineSection":
        """
        Clean special characters and formatting marks generated by LLM.
        Removes markdown-style formatting like **, *, -, etc.
        """

        def clean_text(text: str) -> str:
            if not text:
                return text

            # Remove markdown bold (**text**)
            text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)

            # Remove markdown italic (*text*)
            text = re.sub(r"\*(.*?)\*", r"\1", text)

            # Remove leading dashes and bullet points
            text = re.sub(r"^[\s]*[-•·▪▫◦‣⁃]*[\s]*", "", text, flags=re.MULTILINE)

            # Remove trailing dashes
            text = re.sub(r"[-]+$", "", text, flags=re.MULTILINE)

            # Remove extra whitespace
            text = re.sub(r"\s+", " ", text).strip()

            return text

        def clean_list(items: List[str]) -> List[str]:
            """Clean a list of strings."""
            cleaned_items = []
            for item in items:
                cleaned_item = clean_text(item)
                if cleaned_item:  # Only add non-empty items
                    cleaned_items.append(cleaned_item)
            return cleaned_items

        return OutlineSection(
            title=clean_text(self.title),
            description=clean_text(self.description),
            key_points=clean_list(self.key_points),
            estimated_slides=self.estimated_slides,
            section_index=self.section_index,
            section_type=clean_text(self.section_type),
        )


class PresentationOutline(BaseModel):
    """Complete presentation outline."""

    # Title of the presentation
    title: str = Field(..., description="Title of the presentation")

    # Sections in the presentation
    sections: List[OutlineSection] = Field(
        ..., description="Sections in the presentation"
    )

    # Total number of slides in the presentation
    total_slides: int = Field(
        ..., description="Total number of slides in the presentation"
    )

    # Optional presentation description
    description: Optional[str] = Field(
        None, description="Description of the presentation"
    )

    def clean(self) -> "PresentationOutline":
        """
        Clean special characters and formatting marks generated by LLM.
        Applies cleaning to all text fields and sections.
        """

        def clean_text(text: str) -> str:
            if not text:
                return text

            # Remove markdown bold (**text**)
            text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)

            # Remove markdown italic (*text*)
            text = re.sub(r"\*(.*?)\*", r"\1", text)

            # Remove leading dashes and bullet points
            text = re.sub(r"^[\s]*[-•·▪▫◦‣⁃]*[\s]*", "", text, flags=re.MULTILINE)

            # Remove trailing dashes
            text = re.sub(r"[-]+$", "", text, flags=re.MULTILINE)

            # Remove extra whitespace
            text = re.sub(r"\s+", " ", text).strip()

            return text

        # Clean all sections
        cleaned_sections = [section.clean() for section in self.sections]

        return PresentationOutline(
            title=clean_text(self.title),
            sections=cleaned_sections,
            total_slides=self.total_slides,
            description=clean_text(self.description) if self.description else None,
        )
