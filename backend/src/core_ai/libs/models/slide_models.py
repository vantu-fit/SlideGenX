"""
Data models for slides in the Tree of Thought slide generation system.
"""

import re
from typing import List, Dict, Any, Optional, Union
from pydantic import BaseModel, Field


class Diagram(BaseModel):
    """Diagram specifications for a slide."""

    data: str = Field(..., description="Diagram data in a specific format")
    relations: str = Field(
        default_factory=list,
        description="Containt Object And Relationships between elements in the diagram",
    )


class SlideContent(BaseModel):
    """Content for a specific slide."""

    # Title of the slide
    title: str

    # Main content of the slide
    content: Union[str, List[str]]

    # Optional speaker notes
    notes: Optional[str] = None

    # IDs or descriptions of images needed for the slide
    images_needed: List[str]

    # IDs or descriptions of diagrams needed for the slide
    diagrams_needed: List[Diagram]

    # Keywords for this slide
    keywords: List[str]

    def overide_content(self, new_content: Union[str, List[str]]) -> "SlideContent":
        """
        Override the content of the slide with new content.
        :param new_content: New content to set for the slide
        :return: A new SlideContent instance with the updated content
        """
        return SlideContent(
            title=self.title,
            content=new_content,
            notes=self.notes,
            images_needed=self.images_needed,
            diagrams_needed=self.diagrams_needed,
            keywords=self.keywords,
        )

    def clean(self) -> "SlideContent":
        """
        Clean special characters and formatting marks generated by LLM.
        Removes markdown-style formatting like **, *, -, etc.
        """

        def clean_text(text: str) -> str:
            if not text:
                return text

            # Remove markdown bold (**text**)
            text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)

            # Remove markdown italic (*text*)
            text = re.sub(r"\*(.*?)\*", r"\1", text)

            # Replace standalone asterisk with arrow bullet point
            text = re.sub(r"(?:^|\s)\*(?=\s|$)", " ➤", text)

            # Replace dash at beginning of line or after space at beginning with arrow bullet point
            text = re.sub(r"(?:^|\s)-(?=\s)", " ➤", text, flags=re.MULTILINE)

            # Remove leading dashes and bullet points
            text = re.sub(r"^[\s]*[-•·▪▫◦‣⁃]*[\s]*", "", text, flags=re.MULTILINE)

            # Remove trailing dashes
            text = re.sub(r"[-]+$", "", text, flags=re.MULTILINE)

            # Remove extra whitespace
            text = re.sub(r"\s+", " ", text).strip()

            return text

        def clean_list(items: List[str]) -> List[str]:
            """Clean a list of strings."""
            cleaned_items = []
            for item in items:
                cleaned_item = clean_text(item)
                if cleaned_item:  # Only add non-empty items
                    cleaned_items.append(cleaned_item)
            return cleaned_items

        def clean_content(content: Union[str, List[str]]) -> Union[str, List[str]]:
            """Clean content that can be either string or list of strings."""
            if isinstance(content, str):
                return clean_text(content)
            elif isinstance(content, list):
                return clean_list(content)
            return content

        return SlideContent(
            title=clean_text(self.title),
            content=clean_content(self.content),
            notes=clean_text(self.notes) if self.notes else None,
            images_needed=clean_list(self.images_needed),
            diagrams_needed=self.diagrams_needed,  # Diagram objects don't need text cleaning
            keywords=clean_list(self.keywords),
        )


class SectionContent(BaseModel):
    """Content for a section of the presentation."""

    slides: List[SlideContent] = Field(default_factory=list)


class CompletedSlide(BaseModel):
    """A completed slide with all elements integrated."""

    # Basic slide content
    slide_content: SlideContent

    # Image specifications included in the slide
    image_specs: Optional[Dict[str, Any]] = None

    # Diagram specifications included in the slide
    diagram_specs: Optional[Dict[str, Any]] = None

    # Data visualization specifications included in the slide
    data_viz_specs: Optional[Dict[str, Any]] = None

    # Style specifications applied to the slide
    style_specs: Optional[Dict[str, Any]] = None

    # The rendered or formatted slide content
    generated_slide: str

    # Layout information for the slide
    layout_info: Dict[str, Any] = Field(default_factory=dict)

    def clean(self) -> "CompletedSlide":
        """
        Clean special characters and formatting marks generated by LLM.
        Applies cleaning to slide content and generated slide text.
        """

        def clean_text(text: str) -> str:
            if not text:
                return text

            # Remove markdown bold (**text**)
            text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)

            # Remove markdown italic (*text*)
            text = re.sub(r"\*(.*?)\*", r"\1", text)

            # Replace standalone asterisk with arrow bullet point
            text = re.sub(r"(?:^|\s)\*(?=\s|$)", " ➤", text)

            # Replace dash at beginning of line or after space at beginning with arrow bullet point
            text = re.sub(r"(?:^|\s)-(?=\s)", " ➤", text, flags=re.MULTILINE)

            # Remove leading dashes and bullet points
            text = re.sub(r"^[\s]*[-•·▪▫◦‣⁃]*[\s]*", "", text, flags=re.MULTILINE)

            # Remove trailing dashes
            text = re.sub(r"[-]+$", "", text, flags=re.MULTILINE)

            # Remove extra whitespace
            text = re.sub(r"\s+", " ", text).strip()

            return text

        return CompletedSlide(
            slide_content=self.slide_content.clean(),
            image_specs=self.image_specs,
            diagram_specs=self.diagram_specs,
            data_viz_specs=self.data_viz_specs,
            style_specs=self.style_specs,
            generated_slide=clean_text(self.generated_slide),
            layout_info=self.layout_info,
        )


class Presentation(BaseModel):
    """Complete presentation with all slides."""

    # Title of the presentation
    title: str

    # Description of the presentation
    description: Optional[str] = None

    # Outline of the presentation
    outline: Dict[str, Any]

    # Style information for the presentation
    style: Dict[str, Any]

    # All slides in the presentation
    slides: List[CompletedSlide]

    # Metadata for the presentation
    metadata: Dict[str, Any] = Field(default_factory=dict)

    def clean(self) -> "Presentation":
        """
        Clean special characters and formatting marks generated by LLM.
        Applies cleaning to all text fields and slides in the presentation.
        """

        def clean_text(text: str) -> str:
            if not text:
                return text

            # Remove markdown bold (**text**)
            text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)

            # Remove markdown italic (*text*)
            text = re.sub(r"\*(.*?)\*", r"\1", text)

            # Replace standalone asterisk with arrow bullet point
            text = re.sub(r"(?:^|\s)\*(?=\s|$)", " ➤", text)

            # Replace dash at beginning of line or after space at beginning with arrow bullet point
            text = re.sub(r"(?:^|\s)-(?=\s)", " ➤", text, flags=re.MULTILINE)

            # Remove leading dashes and bullet points
            text = re.sub(r"^[\s]*[-•·▪▫◦‣⁃]*[\s]*", "", text, flags=re.MULTILINE)

            # Remove trailing dashes
            text = re.sub(r"[-]+$", "", text, flags=re.MULTILINE)

            # Remove extra whitespace
            text = re.sub(r"\s+", " ", text).strip()

            return text

        # Clean all slides
        cleaned_slides = [slide.clean() for slide in self.slides]

        return Presentation(
            title=clean_text(self.title),
            description=clean_text(self.description) if self.description else None,
            outline=self.outline,  # Keep outline as dict - can be processed separately if needed
            style=self.style,  # Keep style as dict - no text cleaning needed
            slides=cleaned_slides,
            metadata=self.metadata,  # Keep metadata as dict - can be processed separately if needed
        )
